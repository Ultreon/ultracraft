android {
    namespace "com.ultreon.craft"
    buildToolsVersion "33.0.2"
    compileSdkVersion 33
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
        exclude("META-INF/DEPENDENCIES")
        exclude("META-INF/LICENSE")
        exclude("META-INF/NOTICE")
        exclude("META-INF/INDEX.*")
        exclude("META-INF/ASL2.0")
        exclude("META-INF/AL2.0")
        exclude("META-INF/LGPL2.1")
        exclude("META-INF/*.txt")
        exclude("META-INF/*.md")
        exclude("META-INF/**/*.xml")
        exclude("META-INF/*.properties")
        exclude("META-INF/*.kotlin_module")
        exclude("META-INF/*.kotlin_builtins")
        exclude("META-INF/sisu/**")
        exclude("**/*.kotlin_builtins")
        exclude("*.md")
        exclude("LICENSE.md")
        exclude("LICENSE.*")
        exclude("previous-compilation-data.bin")
    }
    sourceSets {
        main.jniLibs.srcDirs = ['libs']
        main.resources.srcDirs += "../client/src/main/resources"
        main.resources.srcDirs += "../server/src/main/resources"
        main.assets.srcDirs += "../client/src/main/resources"
        main.assets.srcDirs += "../server/src/main/resources"
    }
    defaultConfig {
        applicationId "com.ultreon.craft"
        minSdkVersion 28
        targetSdkVersion 33
        versionCode 1
        versionName "0.1.0"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildTypes {
        release {
            minifyEnabled true
        }
    }
    buildFeatures {
        buildConfig true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    google()
    gradlePluginPortal()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
}


dependencies {
    api 'com.android.support:appcompat-v7:33.0.0'
    api "com.badlogicgames.gdx:gdx-backend-android:$gdx_version"
    api 'androidx.appcompat:appcompat:1.6.1'
    api 'androidx.constraintlayout:constraintlayout:2.1.4'
    api "com.badlogicgames.gdx-video:gdx-video-android:$gdx_video_version"

    // Add rhino
    api 'com.github.sebdomdev:open-file-dialog:1.0.1'
    api 'uk.uuid.slf4j:slf4j-android:2.0.7-0'
    api "io.apisense:rhino-android:1.2.0", {
        exclude group: 'org.mozilla'
    }
    api "com.android.support:support-v4:28.0.0"
    api files("deps/androidawt-1.0.4.aar")
}
// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
    packageTask.dependsOn 'copyAndroidNatives'
}

tasks.register('run', Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.ultreon.craft/com.ultreon.craft.android.AndroidLauncher'
}
