//file:noinspection GroovyUnusedCatchParameter
//file:noinspection GroovyAssignabilityCheck

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.13.0'
        classpath "com.google.code.gson:gson:2.10.1"
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

apply plugin: 'java'
apply plugin: 'java-library'

java {
    withSourcesJar()
    withJavadocJar()
    
    sourceCompatibility("21")
    targetCompatibility("21")
}

dependencies {
    implementation api(project(":gameprovider"))

    implementation api("com.formdev:flatlaf:3.2.1")
    implementation api("com.github.FusionYAML:FusionYAML:$fusion_yaml_version")

    annotationProcessor "com.google.errorprone:error_prone_annotations:2.18.0"

    // CoreLibs
    implementation api("io.github.ultreon.corelibs:collections-v0:$corelibs_version")
    implementation api("io.github.ultreon.corelibs:commons-v0:$corelibs_version")
    implementation api("io.github.ultreon.corelibs:datetime-v0:$corelibs_version")
    implementation api("io.github.ultreon.corelibs:functions-v0:$corelibs_version")
    implementation api("com.github.Ultreon:ultreon-data:$ultreon_data_version")

    // Apache Log4J
    runtimeOnly api("org.apache.logging.log4j:log4j:$log4j_version")
    runtimeOnly api("org.apache.logging.log4j:log4j-core:$log4j_version")
    runtimeOnly api("org.apache.logging.log4j:log4j-api:$log4j_version")
    runtimeOnly api("org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version")
    implementation api("org.apache.commons:commons-lang3:3.13.0")
    implementation api("org.apache.commons:commons-collections4:$commons_collections4_version")
    implementation api("org.apache.commons:commons-compress:$commons_compress_version")
    implementation api("org.tukaani:xz:$tukaani_xz_version")
    implementation api("org.bidib.org.oxbow:swingbits:$swingbits_version")
    implementation api("io.netty:netty-all:$netty_version")

    // JNA
    implementation api("net.java.dev.jna:jna:$jna_version")
    implementation api("net.java.dev.jna:jna-platform:$jna_version")

    implementation api("org.tukaani:xz:$tukaani_xz_version")
    implementation api("com.jcraft:jzlib:1.1.3")

    // SLF4J
    implementation api("org.slf4j:slf4j-api:$slf4j_version")

    // JSON5
    implementation api("de.marhali:json5-java:2.0.0")

    // Google
    implementation api("com.google.code.gson:gson:2.10.1")
    implementation api("com.google.guava:guava:32.0.0-jre")

    // Misc
    implementation api("it.unimi.dsi:fastutil:8.5.12")
    implementation api("com.raylabz:opensimplex:1.0.3")
    implementation api("de.articdive:jnoise-pipeline:4.1.0")

    // Add rhino
    implementation api("org.mozilla:rhino:$rhino_version")

    implementation api("space.earlygrey:shapedrawer:$shapedrawer_version")

    // ImGui
    implementation api("io.github.spair:imgui-java-binding:$imgui_version")
    implementation api("io.github.spair:imgui-java-lwjgl3:$imgui_version")
    implementation api("io.github.spair:imgui-java-natives-linux:$imgui_version")
    implementation api("io.github.spair:imgui-java-natives-macos:$imgui_version")
    implementation api("io.github.spair:imgui-java-natives-windows:$imgui_version")

    implementation api("it.unimi.dsi:fastutil-core:8.5.9")
    implementation api("com.google.code.findbugs:jsr305:$jsr_version")
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    implementation api("org.xbib.elasticsearch:joptsimple:6.3.2.1")
    implementation api("org.apache.logging.log4j:log4j:$log4j_version")
    implementation api("org.apache.logging.log4j:log4j-core:$log4j_version")
    implementation api("org.apache.logging.log4j:log4j-api:$log4j_version")

    // fabric-loader dependencies
    implementation api("org.ow2.asm:asm:${project.asm_version}")
    implementation api("org.ow2.asm:asm-analysis:${project.asm_version}")
    implementation api("org.ow2.asm:asm-commons:${project.asm_version}")
    implementation api("org.ow2.asm:asm-tree:${project.asm_version}")
    implementation api("org.ow2.asm:asm-util:${project.asm_version}")

    implementation api("net.fabricmc:sponge-mixin:${project.mixin_version}") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }

    //noinspection GradleDynamicVersion
    implementation api('net.fabricmc:tiny-mappings-parser:0.3.0+build.17')
    implementation api('net.fabricmc:tiny-remapper:0.8.7')
    //noinspection GradleDynamicVersion
    implementation api('net.fabricmc:dev-launch-injector:0.2.1+build.8')
    implementation api('net.fabricmc:access-widener:2.1.0')

    implementation api("net.fabricmc:fabric-loader:$fabric_version")

    //noinspection GradleDynamicVersion
    implementation api('net.fabricmc:tiny-mappings-parser:0.3.0+build.17')
    implementation api('net.fabricmc:tiny-remapper:0.8.7')
    //noinspection GradleDynamicVersion
    implementation api('net.fabricmc:dev-launch-injector:0.2.1+build.8')
    implementation api('net.fabricmc:access-widener:2.1.0')

    implementation api("net.fabricmc:fabric-loader:$fabric_version")
}

processResources {
    from(file("$rootProject.projectDir/LICENSE")) { into "META-INF/" }
    exclude "*.pdn", "*.xcf", "*.ps"

    inputs.property "version", version

    filesMatching("metadata.json") {
        expand(["version": version])
    }
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Ultracraft',
                'Implementation-Vendor': 'Ultreon Team',
                project_version: project.version,
                'Main-Class': 'com.ultreon.craft.DesktopLauncher',
                'Multi-Release': 'true'
    }

    from {
        compileJava.outputs
    }
    from {
        processResources.outputs
    }

    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.register('prepareRun', {
    Files.createDirectories(Paths.get(rootProject.projectDir.getAbsolutePath(), "run"))
})

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.register('copyDependencies', Copy) {
    from(configurations.runtimeClasspath)
    into("$projectDir/build/jars")
}

tasks.register('copyJar', Copy) {
    from(tasks.jar)
    into("$projectDir/build/jars")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            //noinspection GrUnresolvedAccess
            from components.java
        }
    }
}

compileJava {
    options.encoding = "UTF-8"
}
